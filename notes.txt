# Node.js & Express.js Complete Study Notes

## 1. Package.json Overview

**What is package.json?**
- The core configuration file of a Node.js project
- Stores project metadata, dependencies, and scripts
- Enables easy package management and project sharing
- Allows others to install and run your project using `npm install` and `npm run`

### Key Components:
- **Project metadata**: name, version, description, author
- **Dependencies**: packages required for production
- **DevDependencies**: packages needed only for development
- **Scripts**: custom commands for running tasks

## 2. Semantic Versioning (SemVer)

When you install Express with `npm i express`, you'll see version numbers like `^5.1.0`:

### Version Number Structure: `MAJOR.MINOR.PATCH`
- **5** → Major version (breaking changes, critical updates)
- **1** → Minor version (new features, backward compatible)
- **0** → Patch version (bug fixes, small changes)

### Version Range Symbols:
- **`^5.1.0`** (Caret) → Allows updates ≥5.1.0 but <6.0.0
  - Permits minor and patch updates, but not major
- **`~5.1.0`** (Tilde) → Allows updates ≥5.1.0 but <5.2.0
  - Permits only patch updates
- **`5.1.0`** (Exact) → Only this specific version

## 3. Node Modules

**What is node_modules?**
- A folder that contains all installed packages and their dependencies
- Created when you run `npm install`
- Contains the actual source code of packages

### Structure:
```
node_modules/
├── express/
│   ├── package.json
│   ├── index.js
│   └── lib/
├── dependency1/
├── dependency2/
└── ...
```

**Important**: Never commit `node_modules` to version control (add to `.gitignore`)

## 4. Package-lock.json

**Purpose:**
- Locks the exact versions of all installed packages and their sub-dependencies
- Ensures consistent installations across different environments
- Generated automatically when you run `npm install`
- **Should be committed** to version control

## 5. Middleware in Express.js

**Definition:**
Middleware is a function that executes between the request and response cycle.

### Middleware Function Structure:
```javascript
function middleware(req, res, next) {
  // Access to:
  // req - request object
  // res - response object  
  // next - function to pass control to next middleware
  
  // Do something...
  next(); // Call next() to continue
}
```

### Types of Middleware:
- **Application-level**: `app.use(middleware)`
- **Router-level**: `router.use(middleware)`
- **Built-in**: `express.json()`, `express.static()`
- **Third-party**: `cors`, `helmet`, etc.
- **Error-handling**: Has 4 parameters `(err, req, res, next)`

## 6. JavaScript Object vs JSON

### JavaScript Object:
```javascript
const jsObject = {
  firstName: "Chandra",
  lastName: "Prakash", 
  gender: "male",
  age: 25  // Numbers, booleans, functions allowed
};
```

### JSON (JavaScript Object Notation):
```json
{
  "firstName": "Chandra",
  "lastName": "Prakash",
  "gender": "male",
  "age": 25
}
```

### Key Differences:
- **JSON**: Keys must be strings (in quotes), limited data types
- **JS Object**: Keys can be unquoted, supports functions, undefined, etc.
- **JSON**: Text format for data exchange
- **JS Object**: Actual JavaScript data structure

## 7. Promises and Async/Await

### Promise States:
1. **Pending** → Initial state, operation not completed
2. **Fulfilled** → Operation successful, has a result
3. **Rejected** → Operation failed, has an error

### Promise Example:
```javascript
const myPromise = new Promise((resolve, reject) => {
  if (success) {
    resolve("Success data");
  } else {
    reject("Error message");
  }
});
```

### Async/Await:
- **`async`** → Makes a function return a Promise
- **`await`** → Pauses execution until Promise resolves/rejects
- Can only use `await` inside `async` functions

```javascript
async function getData() {
  try {
    const result = await myPromise;
    console.log(result);
  } catch (error) {
    console.error(error);
  }
}
```

```

PARAMS vs QUERY 
[1] PARAMS (Route Parameters)

Part of the URL path itself, used to identify specific resources like /api/user/:id
Example: /api/user/123 → req.params.id = "123"

[2] QUERY (Query Parameters)

Optional data sent after ? in URL, used for filtering/searching like /api/user?email=""
Example: /api/user?age=25&city=delhi → req.query.age = "25", req.query.city = "delhi"

```

## 8. Express.js Project Structure (Corrected)

### Typical Project Setup Flow:

#### Step 1: Server Setup
```javascript
// app.js or server.js
require("dotenv).config()
const express = require('express');
const app = express();
const connectDB= require('./config/db.js')

// Database connection
connectDB()

// Middleware
app.use(express.json());

// Routes
app.use("/api/user", userRoutes);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

#### Step 2: Database Configuration
```javascript
// config/db.js
const mongoose = require('mongoose');

const connectDB = mongoose.connect('mongodb://localhost:27017/myapp')
  .then(() => console.log('Database connected'))
  .catch(err => console.error('Database error:', err));

module.exports = connectDB()
```

#### Step 3: Model Definition
```javascript
// models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

module.exports = mongoose.model('User', userSchema);
```

#### Step 4: Routes Setup
```javascript
// routes/userRoutes.js
const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');

router.post("/signup", userController.register);
router.post("/login", userController.login);

module.exports = router;
```

#### Step 5: Controller Implementation
```javascript
// controllers/userController.js
const User = require('../models/User');

const userController = {

register = async (req, res) => {
  try {
    const { username, email, password } = req.body;
    const user = new User({ username, email, password });
    await user.save();
    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
}
};

module.exports= userController;

```

### Final Project Structure:
```
project/
├── config/
│   └── db.js
├── controllers/
│   └── userController.js
├── models/
│   └── User.js
├── routes/
│   └── userRoutes.js
├── app.js
├── package.json
└── package-lock.json
```

### API Endpoint:
- **POST** `/api/user/signup` → Creates a new user
- The route combines: base URL + route prefix + specific route

## Key Corrections Made:
1. Added proper project structure organization
2. Corrected the middleware explanation with proper syntax
3. Enhanced Promise and async/await explanations
4. Added missing details about package management
5. Improved code examples with proper error handling
6. Added project structure visualization



## bcryptjs is used to hash the password or Encrypt the password using
   const salt = await bcrypt.genSalt(10);
   req.body.password = await bcrypt.hash(req.body.password, salt)